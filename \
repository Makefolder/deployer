// Parse services', search for "key-files", build the project.
// The "key-files" are file that are important for the project
// such as "package.json", "gleam.toml" or "Cargo.toml".

use crate::generate_conf::file_struct::Service;
use std::{
    io,
    path::{Path, PathBuf},
};
use walkdir::WalkDir;

#[allow(unused_imports)]
use std::process::Command;

#[allow(dead_code)]
enum KeyFile {
    Gleam,
    Rust,
    NodeJS,
    None,
}

#[allow(dead_code)]
impl KeyFile {
    fn value<'a>(&self) -> &'a str {
        match self {
            KeyFile::Gleam => "gleam.toml",
            KeyFile::Rust => "Cargo.toml",
            KeyFile::NodeJS => "package.json",
            _ => "none",
        }
    }
    fn str_to_value(value: &str) -> Self {
        match value {
            "gleam.toml" => KeyFile::Gleam,
            "Cargo.toml" => KeyFile::Rust,
            "package.json" => KeyFile::NodeJS,
            _ => KeyFile::None,
        }
    }
}

#[allow(unused_variables)]
pub fn build(services: &[Service]) -> io::Result<()> {
    let path = Path::new("/Users/killer-whale/Desktop/test-destination/15_Sep_2024_1021");
    list_directories(&path)?;
    for entry in WalkDir::new(path).follow_links(true).into_iter()
        .filter_entry(|s| s.path().is_file()) {
        if entry.unwrap().clone().path().ends_with(".toml") {
            println!("{}", entry.unwrap().path().display());
        }
        //println!("{}", entry?.path().display());
    }
    Ok(())
}

// Search for supported "key-files"
fn list_directories(path: &Path) -> io::Result<Vec<PathBuf>> {
    for entry in WalkDir::new(path).follow_links(true) {
        println!("{:?}", entry);
    }
    let paths: Vec<PathBuf> = Vec::new();
    Ok(paths)
}

