{
  "sha": "b55bb7dfa008501c5475d12474ab1168ee3ac5ee",
  "node_id": "C_kwDOMpWwrtoAKGI1NWJiN2RmYTAwODUwMWM1NDc1ZDEyNDc0YWIxMTY4ZWUzYWM1ZWU",
  "commit": {
    "author": {
      "name": "aegislash525",
      "email": "art.fedotov.ua@gmail.com",
      "date": "2024-08-31T16:31:42Z"
    },
    "committer": {
      "name": "aegislash525",
      "email": "art.fedotov.ua@gmail.com",
      "date": "2024-08-31T16:31:42Z"
    },
    "message": "Config file validation",
    "tree": {
      "sha": "b035f3d17fe59cdb82cd13fdbced6beed1b3f1fc",
      "url": "https://api.github.com/repos/tofuddreg/deployer/git/trees/b035f3d17fe59cdb82cd13fdbced6beed1b3f1fc"
    },
    "url": "https://api.github.com/repos/tofuddreg/deployer/git/commits/b55bb7dfa008501c5475d12474ab1168ee3ac5ee",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/tofuddreg/deployer/commits/b55bb7dfa008501c5475d12474ab1168ee3ac5ee",
  "html_url": "https://github.com/tofuddreg/deployer/commit/b55bb7dfa008501c5475d12474ab1168ee3ac5ee",
  "comments_url": "https://api.github.com/repos/tofuddreg/deployer/commits/b55bb7dfa008501c5475d12474ab1168ee3ac5ee/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "dfa25d8abf26068795ab6dd31a74aed190e94dd9",
      "url": "https://api.github.com/repos/tofuddreg/deployer/commits/dfa25d8abf26068795ab6dd31a74aed190e94dd9",
      "html_url": "https://github.com/tofuddreg/deployer/commit/dfa25d8abf26068795ab6dd31a74aed190e94dd9"
    }
  ],
  "stats": {
    "total": 53,
    "additions": 41,
    "deletions": 12
  },
  "files": [
    {
      "sha": "6262c8ea06cabc5d081caba69448d5ce63016f7a",
      "filename": "src/main.rs",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/tofuddreg/deployer/blob/b55bb7dfa008501c5475d12474ab1168ee3ac5ee/src%2Fmain.rs",
      "raw_url": "https://github.com/tofuddreg/deployer/raw/b55bb7dfa008501c5475d12474ab1168ee3ac5ee/src%2Fmain.rs",
      "contents_url": "https://api.github.com/repos/tofuddreg/deployer/contents/src%2Fmain.rs?ref=b55bb7dfa008501c5475d12474ab1168ee3ac5ee",
      "patch": "@@ -31,7 +31,7 @@ fn handle_generate(args: &[String]) {\n \n async fn handle_run(args: &[String]) {\n     arg_len!(args.len(), 3, macros::HELP_MSG);\n-    let mut path: String = String::from(&args[2]);\n+    let mut path = String::from(&args[2]);\n     generate_conf::validate_path(&mut path);\n     run_deployer::run(&path).await;\n }"
    },
    {
      "sha": "3130d680b9d54223b3664bdc7727fe6407b91f73",
      "filename": "src/run_deployer.rs",
      "status": "modified",
      "additions": 40,
      "deletions": 11,
      "changes": 51,
      "blob_url": "https://github.com/tofuddreg/deployer/blob/b55bb7dfa008501c5475d12474ab1168ee3ac5ee/src%2Frun_deployer.rs",
      "raw_url": "https://github.com/tofuddreg/deployer/raw/b55bb7dfa008501c5475d12474ab1168ee3ac5ee/src%2Frun_deployer.rs",
      "contents_url": "https://api.github.com/repos/tofuddreg/deployer/contents/src%2Frun_deployer.rs?ref=b55bb7dfa008501c5475d12474ab1168ee3ac5ee",
      "patch": "@@ -7,43 +7,72 @@ use tokio::time::{self, Duration};\n /// Function that starts Deployer. It makes\n /// request to GitHub's REST API every 60 seconds.\n /// As an argument it takes path to the config file.\n+///\n+/// Panics if directory does not exist, no services\n+/// specified, token/repository is not specified or\n+/// repository link is invalid.\n pub async fn run(path: &str) {\n     let config = serialise(path);\n-    dbg!(&config);\n     println!(\"token {}\", config.token);\n \n-    let api_url: String = url_fmt(&config.repository);\n+    if config.token == \"\" || config.token == \"YOUR-GITHUB-TOKEN-HERE\" {\n+        panic!(\"Github token is not specified!\");\n+    }\n+\n+    if config.repository == \"\" || config.repository == \"https://github.com/your-repository/link\" {\n+        panic!(\"Github repository is not specified!\");\n+    }\n+\n+    let api_url = url_fmt(&config.repository);\n+    validate_dir(&config.services_dir);\n+    validate_dir(&config.destination);\n+\n+    if config.services.len() == 0 {\n+        panic!(\"No services specified!\");\n+    }\n+\n     ping(&api_url, &config.token).await.unwrap();\n }\n \n /// Formats URL from `github.com/author/their-repo` to\n /// `https://api.github.com/repos/author/their-repo`.\n /// Panics if URL is badly formatted.\n fn url_fmt(url: &str) -> String {\n-    let base: &str = url;\n-    let base_list: Vec<&str> = base.split('/').collect();\n-    if base_list.len() < 3 {\n+    let list: Vec<&str> = url.split('/').collect();\n+\n+    if list[0] != \"github.com\" || list.len() != 3 {\n+        panic!(\"Bad repository URL.\");\n+    }\n+\n+    if list[1] == \"\" || list[2] == \"\" {\n         panic!(\"Bad repository URL.\");\n     }\n \n     format!(\n         \"https://api.github.com/repos/{}/{}\",\n-        base_list[base_list.len() - 2],\n-        base_list[base_list.len() - 1]\n+        list[list.len() - 2],\n+        list[list.len() - 1]\n     )\n }\n \n+/// Check if specified directory exists.\n+/// Panics if it does not.\n+fn validate_dir(dir: &str) {\n+    let path = std::path::Path::new(dir);\n+    if !path.exists() {\n+        panic!(\"Path \\\"{}\\\" does not exist!\", dir);\n+    }\n+}\n+\n /// Converts JSON data from the config file into\n /// `ConfigFile` struct. Panics if fails to\n /// either open the config file or to read it.\n fn serialise(path: &str) -> ConfigFile {\n-    let mut buf: Vec<u8> = Vec::new();\n+    let mut buf = Vec::new();\n     let mut file = File::open(path).expect(\"Failed to open the config file.\");\n-    let size: usize = file\n-        .read_to_end(&mut buf)\n+    file.read_to_end(&mut buf)\n         .expect(\"Failed to read the config file.\");\n \n-    println!(\"size: {:?}\", size);\n     serde_json::from_slice(&buf).expect(\"Failed to parse json config.\")\n }\n "
    }
  ]
}
